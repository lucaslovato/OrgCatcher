#+TITLE: Electronic Design Automation Report

* EDA software comparison
  EDA (Electronic Design Automation) tools help to design, simulate and share
  hardware. This report will choose one EDA Tool to create hardware schematics
  for the Drawbridge project. An EDA tool is a must for a hardware project and
  choosing an open source tool for this like Kicad, gEDA or Fritzing is a plus
  as they are available for anyone free of charge, besides being also high
  quality software. Therefore, we will compare the three just mentioned EDA
  tools and choose the best one for our current needs in Drawbridge. More info
  on these tools and others is available at [[https://en.wikipedia.org/wiki/Comparison_of_EDA_software][Wikipedia]].

  This document is divided in three sections:
  - Components :: Comparison of available hardware components in each software
                  and how to create custom components,
  - Learning curve :: Comparison of how hard it is to create a schematic,
  - The file format :: Which software has the easiest file format and how to
       understand and generate schematic files, and
  - Overview :: Summary with explanation of which tool we chose.

* Components
  Components, also called by symbols on EDA tools, are the abstract
  representation of physical elements. Creating schematics by using these
  symbols greatly improves project understanding, as they summarize all the
  connections between different parts and are easy to read.

  There are a couple of basic components like resistors, capacitors, batteries
  and others. The representation of basics components in each schematic program
  is similar and easy to understand by anyone who knows the basics of
  electronics.

** How to create components
   Out of the three tools, we found out gEDA and Fritzing are the easiest ones
   to create custom components. This is relevant for the project as the
   component libraries available may not include all the necessary parts we
   need. The rest of this section will present short instructions on how to
   create a custom component in each tool. Videos are also available in this
   repository.

*** Fritzing component creation
 In order to create a custom component in Fritzing, follow these steps:
  1. Select generic IC
  2. Set up the number of pins
  3. Reconfigure the package pins if you need to
     - for instance: move all pins to the left or to the right, or any custom
       setting
  4. Edit pin labels

After those simple steps, save the new component and it is ready to use in other
projects. A video demonstrating how to create a custom component is available
[[file:Videos/FritzingComponentCreation.mp4][here]].

An analysis of Fritzing's file format is not presented here, because it is more
complex than what we desired. As a recap: we would like to have a simple
schematics file format for automatic generation later on.

*** gEDA component creation
  Before we delve into how to create a component in gEDA, be aware that this
  section has two parts:
   1. Simple recipe to create a custom component and link to video
   2. Technical analysis of gEDA file format

**** How to create a custom component
In order to create a custom component in gEDA, follow the next steps:
 1. Create a new file
 2. Select a shape
 3. Add the desired pins
 4. Add pin labels and names
 5. Name the component
 6. Save the file

A video demonstrating how to do that is available [[file:Videos/GedaCustomComponentCreation.mp4][here]].

**** Understanding gEDA .sym files
     :PROPERTIES:
     :CUSTOM_ID: understanding-gEDA
     :END:

  The gEDA file format is simple to understand, what pleased us very much, as it
  makes it simpler to write code to generate custom schematics automatically.
  The rest of this section will take another look at custom component
  construction, but now editing the text of the schematics file manually. A
  complete gEDA text file is available in the [[#geda-custom-component-file][appendix]].

  gEDA files are composed of a sequence of commands followed by arguments. For
  instance:
  #+BEGIN_SRC
  v 20130925 2
  #+END_SRC

  In the above example, =v= is a command to identify the version of gEDA that
  was used to create the file, which is the first argument =20130925=. As for
  the second argument of the command, it is the file format version number. More
  info about these commands is available in the [[http://wiki.geda-project.org/geda:file_format_spec][file format specification]].

  To create a box in a schematic, the letter =B= is used (other shapes are
  available). The code below represents a rectangle on the x, y
  coordinates (54600, 59100).

  #+BEGIN_SRC symbol
  B 54600 59100 1100 2100 3 0 0 0 -1 -1 0 -1 -1 -1 -1 -1
  #+END_SRC

  To create pins the letter =P= is used. In gEDA, they are represented as lines
  and so they need as first arguments the Cartesian coordinates (x, y) for the
  beginning of the line and also the coordinates for the end of the line. Other
  arguments are accepted by this command, please check the specification for
  more information. An example is available below:

  #+BEGIN_SRC symbol
  P 56100 61000
  55700 61000 1 0 0
  {
  T 56100 61000 5 10 0 0 0 0 1 pintype=unknown
  T 55600 61000 5 10 1 1 0 6 1 pinlabel=one
  T 55795 61045 5 10 1 1 0 0 1 pinnumber=1
  T 56100 61000 5 10 0 0 0 0 1 pinseq=0
  }
  #+END_SRC

  The block inside curly braces is not an argument for the pin command, but a
  set of attributes. In the example attributes section, we have the =T= command,
  which is used to represent text, which can be used for labels, numbers and
  others.

  The text command =T= can also be used to name the new component or to add some
  string on the project. For example, we could add a line like:

  #+BEGIN_SRC
  T 54600 59300 9 8 1 0 0 0 1 New Component
  #+END_SRC

  The text "New Component" will be shown on the (x = 54600, y = 59300) coordinates.

  With these commands on a simple file.sym or file.sch, it is possible to create
  a custom box shaped component. Open this file on gEDA and the software will
  show visually the new schematic perfectly.
* Learning curve
  For the following simple projects:
    - [[https://www.electroschematics.com/8297/resistors-parallel/][Resistors in parallel]],
    - [[https://www.electroschematics.com/12634/build-your-own-radio-beacons/][Radio Beacons]], and
    - [[https://www.electroschematics.com/14220/digital-voltage-level-shifter-with-an-analog-twist/][Digital Voltage Level Shifter With An Analog Twist]],
  this section will compare the tools under analysis. The purpose is to analyse
  shortly the process of creating schematics and compare how fast and easy it
  is for each tool.

  After designing these projects in each software, Fritzing and gEDA have
  pleased us more than KiCad. They are more intuitive and easier to understand
  in general. Both offer simple setting up of connections and custom component
  creation. On the other hand, KiCad is non intuitive and has some negative
  points, like:
  - the tool requires changing the cursor mode for each action, which slows down
    the design process,
  - cumbersome keybindings, not as well-chosen as gEDA's, and
  - steep learning curve to manage libraries, both creating libraries of custom
    components as well as reusing a third party one.

* The file format
  An analysis of the file formats of the different tools was made and in this
  section we present our chosen one. The main criterion is being a simple to
  generate format, so that we can automate schematic creation as desired.

  The first file format we found was Gerber, so we will describe it first.
  Afterwards we will mention gEDA files and then briefly compare how
  interchangeable the file formats of the tools analyzed are. As a heads-up: the
  file formats from the gEDA project were our pick.

** Gerber file
  Gerber files are used to print circuit designs on boards, in other words: PCB
  design. Such a file contains information describing copper layers, solder
  masks, legend drills and more. If you want to know more about it, keep reading
  at [[https://en.wikipedia.org/wiki/Gerber_format][wikipedia]]. Of the analyzed tools, only Fritzing supports exporting Gerber
  files.

  Drawbridge focus is to generate schematic by code, not PCB designs. Therefore,
  we discard the Gerber as it is unnecessarily complex.

** gEDA files
   gEDA has two file format extensions: sch and sym. Sch files are for
  schematics, while sym files are for symbols. They are easy to understand and
  to modify as they have a simple text representation. For more info about the
  syntax of gEDA files, check its  [[http://wiki.geda-project.org/geda:file_format_spec][documentation]].

  Some custom components were created for test on gEDA and the process worked
  well. More information about gEDA files is available in the [[#understanding-gEDA][Understanding gEDA
  .sym files]] section of this report.

** File format interchangeability
  This section verifies which file formats are accepted by other tools. We found
  the following:
  - Kicad recognizes the gEDA format, but warns a problem happened, and then can
    not read the file well
  - Fritzing only recognizes files in its own format, which has .fz extension,
    not opening any others
  - gEDA accepts .sch files for schematics and .sym for symbols
    - important note: plenty of electronic schematics online are available in
      these formats

* Overview
  Three EDA open source software were tested: Fritzing, gEDA and KiCad.
  - Fritzing :: this is the pretty one and we liked it, but its file format is
                cumbersome, which would complicate automatic schematic
                generation
  - KiCad :: we found it non-intuitive, even though it is the most updated of
             the three. This tool focuses in PCB (Printed Circuit Board) design
             which is not our main goal.

  - gEDA :: out of the three, this is the least updated, with its last stable
            release from 2013. Even with this problem, gEDA has shown to be the
            best choice for our needs with Drawbridge: easy to create custom
            components, simple file format that can be generated, and overall
            easy to learn.

* Appendix
** gEDA custom component file
   :PROPERTIES:
   :CUSTOM_ID: geda-custom-component-file
   :END:

   A complete component file is available below. It is a generic IC with some
pins and labels.

#+BEGIN_SRC gerber
v 20130925 2
B 56100 59100 1100 2100 3 0 0 0 -1 -1 0 -1 -1 -1 -1 -1
P 56100 61000 55700 61000 1 0 0
{
T 56100 61000 5 10 0 0 0 0 1 pintype=unknown
T 55600 61000 5 10 1 1 0 6 1 pinlabel=one
T 55795 61045 5 10 1 1 0 0 1 pinnumber=1
T 56100 61000 5 10 0 0 0 0 1 pinseq=0
}
P 56100 60600 55700 60600 1 0 0
{
T 56100 60600 5 10 0 0 0 0 1 pintype=unknown
T 55645 60595 5 10 1 1 0 6 1 pinlabel=two
T 55795 60645 5 10 1 1 0 0 1 pinnumber=2
T 56100 60600 5 10 0 0 0 0 1 pinseq=0
}
P 56100 60200 55700 60200 1 0 0
{
T 56100 60200 5 10 0 0 0 0 1 pintype=unknown
T 55645 60195 5 10 1 1 0 6 1 pinlabel=three
T 55795 60245 5 10 1 1 0 0 1 pinnumber=3
T 56100 60200 5 10 0 0 0 0 1 pinseq=0
}
T 56100 59700 9 8 1 0 0 0 1 New Component
#+END_SRC
