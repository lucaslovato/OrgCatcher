#+title: Sensors Interface

* Introduction
  Each sensor used in drawbridge has its own initialization, input, output and
  etc. The team must create an interface to deal with this project
  characteristic, this interface will be the base for the hole project, it need
  to be made in such way that it can be easily tested and validated.

* Description
  We are aiming to create a sensors interface design and independent of language
  we are focusing a good and reliable structure. After we have the interface we can choose the
  technology.

** Ideas about design
*** Templates
    One idea is to use C++ templates to create functions with generic types that can be
    used with all (most) sensors. We are studying about this topic and validating
    if they work well on Arduino-based board on [[https://git.brickabode.com/drawbridge/drawbridge-tracking/issues/119][ISSUE119]].Y
    
*** C and Struct
    Another option is to use C and Structs instead of C++ classes. In the
    [[https://git.brickabode.com/drawbridge/drawbridge-tracking/issues/119][ISSUE119]] we also will study about this and check the options.

* Code
  Even this code being a .cpp file we aren't focusing in any language for now.
  The purpose of this code is more to illustrate what are we are trying to
  establish for a solid interface for our sensors.

  #+BEGIN_SRC cpp
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <vector>

using namespace std;

typedef vector< tuple<int,string> > tuple_list;

enum CommProtocols
{
    I2S = 0,
    Serial = 1,
    CAN = 2
};

struct SensorInfo
{
    int Id;
    tuple_list Ports;
    CommProtocols CommProtocol;
    int Baud;
};

template<typename A, typename C>
class ISensor
{
private:
public:
    ISensor()
    {
        //Constructor
        //Info = pInfo;
    }

    //Functions
    virtual bool initialize();
    virtual bool close();
    virtual C read();
    virtual bool IsAlive();
    //virtual SensorInfo GetInfo();
};

//this class will be used as a type and to concentrate unity conversions
class Temperature
{
    private:
    /* data */
    public:
    Temperature(/* args */);
};

class TemperatureSensor : ISensor<SensorInfo, Temperature>
{
    //private:
    public:
    SensorInfo Info;

    TemperatureSensor() : ISensor()
    {
        Info.CommProtocol = I2S;
        Info.Baud = 9600;
        Info.Ports.emplace_back(5,"ONE_WIRE_BUS");
    }
};

  #+END_SRC
