#+TITLE: Hall Effect Sensor
#+TASK_ID: SNS010

* Introduction

** Purpose

  The purpose of this report is to introduce the reader to the [[./49E-datasheet.pdf][49E sensor]] (Hall
  Effect Sensor). This is a type of magnetic sensor, which means it can detect
  the magnetic field applied to it. After reading, the reader should be able to:

  - Understand the principle of the Hall Effect Sensor
  - Understand the use of the sensor in the project
  - Mount a circuit with this sensor to be able to detect a magnetic field
  - Make a ESP32 software to work with this circuit
  - Test the circuit using a magnet to detect the magnetic field variation

** The microcontroller

   This project uses a microcontroller [[https://en.wikipedia.org/wiki/ESP32][ESP32]] to read the sensor's data and
   process it. However, the code used here is not ESP32 specific, so it should
   work with other arduino-like devices.

*** Program the microcontroller

    The code to the circuit will be programmed and uploaded through the [[https://en.wikipedia.org/wiki/Arduino_IDE][Arduino
    IDE]]. To configure the Arduino IDE in order to work with ESP32 check the
    [[#setting-arduino-ide][Setting the Arduino IDE]].

** The sensor

    This is the sensor 49E (Hall Effect Sensor):

#+CAPTION: Hall Effect Sensor (49E)
#+NAME: Hall Effect Sensor (49E)
#+ATTR_HTML: :width 50% :height 50%
#+ATTR_ORG: :width 100px
[[./sensor-49E.jpg]]


  This is the 49E with the HW-477 (dock for the sensor):

#+CAPTION: Hall Effect Sensor (49E) with the HW-477
#+NAME: Hall Effect Sensor (49E) with the HW-477
#+ATTR_HTML: :width 50% :height 50%
#+ATTR_ORG: :width 100px
[[./49E.jpg]]

   This is the magnets used to test the sensor:

#+CAPTION: Magnet used to test the sensor
#+NAME: Magnet used to test the senor
#+ATTR_HTML: :width 50% :height 50%
#+ATTR_ORG: :width 100px
[[./magnet.jpg]]

** How the Sensor Works

Wikipedia[fn:Hall_Effect_Sensor] has a great explanation of how the hall effect sensor works:
#+BEGIN_QUOTE
A Hall effect sensor is a device that is used to measure the magnitude of a
magnetic field. Its output voltage is directly proportional to the magnetic
field strength through it.

Hall effect sensors are used for proximity sensing, positioning, speed
detection, and current sensing applications.
#+END_QUOTE

Electronics Tutorials[fn:Hall_Effect_Principle] has a great information about the principle of the
sensor:
#+BEGIN_QUOTE
Hall Effect Sensors consist basically of a thin piece of rectangular p-type
semiconductor material such as gallium arsenide (GaAs), indium antimonide (InSb)
or indium arsenide (InAs) passing a continuous current through itself. When the
device is placed within a magnetic field, the magnetic flux lines exert a force
on the semiconductor material which deflects the charge carriers, electrons and
holes, to either side of the semiconductor slab. This movement of charge
carriers is a result of the magnetic force they experience passing through the
semiconductor material.

As these electrons and holes move side wards a potential difference is produced
between the two sides of the semiconductor material by the build-up of these
charge carriers. Then the movement of electrons through the semiconductor
material is affected by the presence of an external magnetic field which is at
right angles to it and this effect is greater in a flat rectangular shaped
material.
#+END_QUOTE

  For more information about the sensor and its tech details check the
  [[./49E-datasheet.pdf][datasheet]].

** Use of this sensor on the Drawbridge project

   The purpose of this sensor on the project is to help detect the opening of
   the module's lid. How will it be useful? Here's the scenario: if someone
   tries to break into the HSM, one way is to remove the lid to get inside. For
   this reason the sensor will help to detect it and follow the security policy.

   For more information on the top-level design of Drawbridge, check the
   [[../../doc/newspec.org][documentation]].

* Task Description

This task includes researching what are the available magnetic sensors on the
market and choosing one or more to order and test. The reasoning for why a
specific sensor is chosen should be presented in a report, as well as photos,
videos and descriptions of all the work done. As for the micro-controller, an
ESP32 or STM32 should be used.

* System Requirements
** Hardware
   - 1 ESP32 DEVKITV1 module
   - 1 Hall Effect Sensor 49E (with HW-477 dock)
   - 1 Neodymium magnet N35 (10mm x 4mm)
   - 1 Resistor (100Ω - 220Ω)
   - 1 LED
   - 7 jumper wires
   - 1 breadboard 830 points
   - 1 USB cable

** Software
   - Arduino IDE 1.8.9
   - Arduino library [[https://github.com/espressif/arduino-esp32][arduino-esp32]] for ESP32 

* What was done

  A research about magnetic sensors was done to make sure we would choose the
  best fit for the project. That research looked for sensor applications,
  response time and some useful tech details. The considered options were [[https://en.wikipedia.org/wiki/Reed_switch][Reed
  Switch Sensor]] and [[https://en.wikipedia.org/wiki/Hall_effect_sensor][Hall Effect Sensor]]. The Hall Effect one was chosen because
  it is more accurate. Reed Switch is a component with contacts that close when
  a magnetic field is applied in it, so it doesn't measure the field's
  intensity.

  Initially the circuit only tests the sensor reading its raw values. Afterwards
  the circuit was mounted according to the [[Schematic of the project][schematic]] and the [[#code][code]] of this
  project. These raw values were converted to nano Tesla values (measure in SI
  of magnetic flux) using the following linear equation:

\begin{equation}
y=\frac{3}{200} \cdot x + \frac{5}{2}
\end{equation}

- y: Output Voltage [V]
- x: Field intensity [mT]

This equation is available on the page 3 of the [[./49E-datasheet.pdf][sensor datasheet]].

#+CAPTION: Schematic of the project
#+NAME: Schematic of the project
#+ATTR_HTML: :width 80% :height 80%
#+ATTR_ORG: :width 500px
[[./schematic.jpg]]

- Access schematics in [[./schematics.pdf][PDF]] or in [[./magnetic-sensor.sch][gEDA]].

   This is a picture of a mounted circuit:

#+CAPTION: Mounted circuit
#+NAME: Mounted circuit
#+ATTR_HTML: :width 50% :height 50%
#+ATTR_ORG: :width 500px
[[./magnetic-sensor-circuit.jpg]]

** Code

   - Check the [[#code][code]] in the appendix section.

** Video of the circuit working

   There is a [[./magnetic-sensor-working.mp4][video]] recording of the circuit working provided in this section,
   for some reasons:
     - Show the circuit correctly working
     - Test the proper functionality of the circuit
     - Have a better understanding of the generated circuit's output


   The values read by the sensor change according to the distance between it and
   the magnet. The code converts these values to nano Tesla unit.

   When the lid starts to open, the distance between it and the base changes, so
   if a magnet was fixed on the lid and the sensor in the base, they will be
   moved away from each other, so the magnetic field (generated by the magnet)
   applied to the sensor will change and the sensor will detect this variation
   in the field.

   In this test was defined a minimum and maximum allowed distance, it means the
   magnet must be inside of this range of distance from the sensor, otherwise
   the circuit triggers. The minimum distance defined in the test was 1cm and
   the maximum was 1.5cm.

   To check if the magnet is in an allowed position, the circuit was calibrated
   following this method:

   - The magnet was placed at a distance of 1cm from the sensor and the value
     read by the sensor was set in the code as the minimum value allowed.
   - The same method was used for the distance of 1.5cm to set the maximum
     distance allowed.
   - These steps were made for both polarizations of the magnet, because each
     side of the magnet has a different polarization, and it will output
     different values read by the sensor.

   The range of allowed values for the both polarizations can be checked in this
   section of the code:

#+INCLUDE: "./magnetic-sensor.ino" :lines "42-49" src c

   So when the sensor reads a value outside of these ranges the circuit will
   turn on the led (the led represent the trigger). In a real application when
   the lid starts to open the magnet will leave the allowed position and the
   circuit will detect it.

   The sensor was calibrated to the kind of magnet presented in this report, so
   a different magnet may not work with the circuit because the magnetic's field
   strength would be different, and consequently the read values too.

   The reason of the maximum distance limit is to check when the magnet moves
   away from the sensor. The minimum distance will check if the magnet going
   closer to the sensor or into a robbery situation if someone try to bypass the
   magnetic sensor using another rogue magnet (like the [[https://magnasphere.com/releases/18404-2/][vulnerability in Reed
   Switch security]]).

*** How it was tested:

   - Connected the circuit to the computer
   - Uploaded the [[#code][code]] to the ESP32
   - Opened Serial Monitor (the serial monitor is a screen that shows data,
     check [[https://learn.adafruit.com/adafruit-arduino-lesson-5-the-serial-monitor/the-serial-monitor][references]]), the communication via USB cable can be accessed in the
     Arduino IDE software.
   - Approaches and moves away the magnet from the sensor to test
   - Defined an allowed distance between the sensor and the magnet of 1cm and
     1.5cm
   - Set the distance values in the code

   The magnet was placed at different distances of the sensor. For each
   distance, the intensity of the magnetic field applied in the sensor changes,
   so the sensor read different values as shown in the video.

* Results

  This is the output of the Arduino Serial Monitor that we can see in the video
  section above. The following numbers represent the values in nano Tesla units
  (Tesla is the SI unit to measure magnetic induction).

  The output of the Arduino Serial Monitor is the following:

#+BEGIN_SRC
2522544.00
2522628.50
2522664.75
2522713.25
2522967.00
2523728.50
2525590.25
2537122.00
2523136.50
2523136.50
2522906.50
#+END_SRC

  The numbers change according to the distance between the magnet and Hall
  Effect Sensor. Check the allowed values in the code:

#+INCLUDE: "./magnetic-sensor.ino" :lines "42-49" src c

The first allowed range is from 2515931.75 to 2519256.00, the second range is
from 2523015.50 to 2525541.75.

If the read value is inside of the first range (2515931.75 - 2519256.00) or
inside of the second range (2523015.50 - 2525541.75) the circuit will do
nothing, otherwise the circuit will trigger.

* Conclusions and Recommendations

  The 49E (Hall Effect Sensor) is a good choice. It's simple to program, connect
  to the circuit and is cheap. It gets the job done for the project because it
  has a quick (response time is 3us) and accurate response (sensitivity around
  1.8mV/G[fn:G-units]).

  The first option was to use Reed Switches, but the Hall Effect Sensor was
  chosen because since it measures the magnetic field, it is more accurate on
  the readings. Also, Reed Switch can be bypassed using a rogue magnet (check
  this [[https://magnasphere.com/releases/18404-2/][reference]]). To bypass the Hall Effect Sensor using a rogue magnet is very
  hard, because the correct intensity of magnetic field must be applied to the
  sensor, and the sensor is able to detect a variation of this intensity
  triggering the circuit.

* Appendix

** Code
:PROPERTIES:
:CUSTOM_ID: code
:END:

#+INCLUDE: "./magnetic-sensor.ino" src c

- [[./magnetic-sensor.ino][Code file]]

** Setting the Arduino IDE
:PROPERTIES:
:CUSTOM_ID: setting-arduino-ide
:END:

*** Installation

   In order to make the Arduino IDE work properly with the ESP32 board, some
   settings are needed:

   - Install ESP32 library. [[https://github.com/espressif/arduino-esp32][These instructions]] are a nice and clear tutorial to
     set up the IDE. This setting are needed to upload the code to the ESP32.

   - Python Serial must be installed for proper uploading to the ESP32. To
     install in Linux use this command:

#+BEGIN_SRC
$ sudo apt install python3-serial python-serial
#+END_SRC

*** Select the correct board

   - Select the ESP32 board in Arduino IDE:
          - Tools -> Board -> "DOIT ESP32 DEVKIT V1"

* References

  - [[https://en.wikipedia.org/wiki/Hall_effect_sensor][Wikipedia - Hall Effect Sensor]]
  - [[https://en.wikipedia.org/wiki/Reed_switch][WIkipedia - Reed Switch Sensor]]
  - [[https://www.electronics-tutorials.ws/electromagnetism/hall-effect.html][Electronic Tutorials - Hall Effect Sensor]]
  - [[https://maker.pro/arduino/tutorial/how-to-use-a-hall-effect-sensor-with-arduino][Hall Effect Sensor in Arduino]]
  - [[http://www.ti.com/lit/an/slia086/slia086.pdf][Understanding & Applying Hall Effect Sensor Datasheets]]
  - [[http://blog.first4magnets.com/what-is-a-reed-switch-and-which-magnets-operate-them/][How does the Reed Switch work]]
  - [[https://magnasphere.com/releases/18404-2/][Vulnerability in Reed Switch Security]]
  - [[./49E-datasheet.pdf][Datasheet of the 49E (Hall Effect Sensor)]]
  - [[./reed-switch-datasheet.pdf][Datasheet of the Reed Switch]]
  - [[https://github.com/espressif/arduino-esp32][Arduino core for ESP32]]
  - [[https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-mac-and-linux-instructions/][Installing the ESP32 Board in Arduino IDE]]

* Footnotes

[fn:Hall_Effect_Sensor]
[[https://en.wikipedia.org/wiki/Hall_effect_sensor][Wikipedia - Hall Effect Sensor]]
[fn:Hall_Effect_Principle]
[[https://www.electronics-tutorials.ws/electromagnetism/hall-effect.html][Eletronics Tutorials - Hall Effect Sensor]]
[fn:G-units]
[[http://www.ti.com/lit/an/slia086/slia086.pdf][Understanding & Applying Hall Effect Sensor Datasheets]]

- Texas Instruments has a great explanation about the G unit in the above
  paragraph:

#+BEGIN_QUOTE
A magnet produces a magnetic field that travels from the North pole to the South
pole. The total amount of field through a 2-dimensional slice is the “flux”, in
units of weber. Webers per square meter describes flux density, in units of
tesla (T). The unit of gauss (G) also describes flux density, where 1T = 10000G.
In millitesla, 1mT = 10G. Tesla is the official SI unit, and it's used by TI
datasheets, but many other sources use gauss.
#+END_QUOTE
